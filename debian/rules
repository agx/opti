#!/usr/bin/make -f
# -*- makefile -*-

export DH_VERBOSE=1
export DH_OPTIONS=-v
export DEB_BUILD_OPTIONS=1

PYTHON2=$(shell pyversions -vr)
#PYTHON3=$(shell py3versions -vr)

# Sollte das nötig sein? Pbuilder und die Build-daemons machen
# das ja automatisch.

# Prevent setuptools/distribute from accessing the internet.
export http_proxy = http://127.0.9.1:9


%:
	dh $@ --with python2,sphinxdoc


# Brauchst Du die ? Macht das dh_python2 nicht richtig?
#build-python%:
#	python$* setup.py build
#
#install-python%:
#	python$* setup.py install --root=$(CURDIR)/debian/tmp --install-layout=deb
#

build: build-stamp

build-stamp:
	dh_testdir

clean:
	dh_clean

#install:	build

#dh_install ist nur ein tool, da nicht mehrere Sachen reinpacken, wenn dann dh_auto_install überschreiben und
#unten noch mal aufrufen:

override_dh_auto_install:
	dh_prep
	dh_installdirs
	dh_installman --language=C man/*
	#dh_python2

	# Besser override_dh_installdocs

	dh_installdocs --exclude=html


	# Macht alles dh_python2
	cd $(CURDIR)/debian/iptables-optimizer/usr/share/pyshared && \
		cp $(CURDIR)/iptables_optimizer.py iptables_optimizer.py 
	cd $(CURDIR)/debian/iptables-optimizer/usr/share/iptables-optimizer && \
		sed -e 's!python iptables_optimizer.py!/usr/share/pyshared/iptables_optimizer.py!' < $(CURDIR)/iptables-optimizer-functions \
		> iptables-optimizer-functions
	cd $(CURDIR)/debian/iptables-optimizer/usr/sbin && \
		sed -e 's!^source iptables-!source /usr/share/iptables-optimizer/iptables-!' < $(CURDIR)/iptables-optimizer > iptables-optimizer && \
		chmod 755 iptables-optimizer
	cd $(CURDIR)/debian/iptables-optimizer/usr/sbin && ln -s iptables-optimizer ip6tables-optimizer
	cd $(CURDIR)

	# Macht debhelper für Dich mit, wenn Du

	rm -rf .tox
	dh_lintian

	dh_auto_install

override_dh_installdocs:
	python setup.py build_sphinx
	dh_installdocs --package=iptables-optimizer-doc build/sphinx/html

override_dh_auto_clean:
	dh_auto_clean
	rm -rf build
	rm -rf *.egg-info


