
.TH iptables-optimizer 8 "July 2013" "Johannes Hubertz" " "

.SH NAME
iptables-optimizer \- optimize iptables filter-chains in kernel depending on their usage counters

.SH SYNOPSIS
.B iptables-optimizer [-v]
.br

.SH DESCRIPTION
.B iptables-optimizer
is used to sort iptables-rules in relation to the values of their 
packet-counters. And of course, administrators artwork is untouched. 
Sorting only happens in consecutive blocks of accept or drop statements, 
never across their borders. Within these blocks are called partitions 
and so they behave. 

iptables-optimizer is shipped in two files, a shell wrapper an a python exec.
The wrapper is my tribute to different functions of python subprocess,
it runs in three steps, working directory is /var/run, id=0 is neccessary:

.B iptables-save -t filter -c > reference-input

.B iptables_optimizer.py > reference-output

.B iptables-restore < reference-output

Of course, you might want to run it by cron every now and then. 

.SH "LOG"
Steps and count of iptables is reported via syslog.

.SH "OPTIONS"
.IP -v 
additionally shows chains, partitions and moves in log via syslog. 
No check of option content is done.

.SH "EXIT STATUS"
iptables-optimizer returns a value of 0. Other values are not foreseen.

.SH "COMPATIBILITY"
iptables-optimizer
.B should
be compatibe to any iptables implementations out in the wild. If not, keep me informed, thanks. I'll do my very best.

.SH "HISTORY"
iptables-optimizer has grown from first ideas over some month and many 
errors to a productive state. First tries to use subproces within the 
python soon led into problems using different python versions on different
debian releases. So these tasks were done on shell level.

.SH "SEE ALSO"
.BR iptables (8)
.BR iptables-save (8)
.BR iptables-restore (8)

.SH "LICENSE"
GNU General Public License version 3 or any newer version applies to
iptables-optimizer.

.SH "AUTHOR"
Johannes Hubertz <johannes@hubertz.de> wrote this in 2013.
Any comments welcome anytime.

